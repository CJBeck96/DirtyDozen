#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

// Pin Definitions for LCD
#define LCD_RS 4
#define LCD_E 6
#define LCD_D4 10
#define LCD_D5 11
#define LCD_D6 12
#define LCD_D7 13

// Pin Definitions for RFID Reader
#define RST_PIN 9
#define SS_PIN 8

// Pin Definitions for Buzzer and Button
#define BUZZER_PIN 7
#define BUTTON_PIN 5

// Create LCD and RFID objects
LiquidCrystal lcd(LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
MFRC522 rfid(SS_PIN, RST_PIN);

// Racer Data
const int maxRacers = 10;  // Maximum number of racers
const int totalLaps = 30;  // Total laps required per racer

struct Racer {
    String uid;
    int lapCount;
    unsigned long startTime;
    unsigned long lastLapTime;
    unsigned long lapTime;
};

Racer racers[maxRacers];
int racerCount = 0;
int currentRacerIndex = 0;
bool buttonHeld = false;

void setup() {
    // Initialize Serial
    Serial.begin(9600);

    // Initialize LCD
    lcd.begin(16, 2);
    lcd.print("RFID Lap Logger");
    delay(2000);
    lcd.clear();
    lcd.print("Ready...");
    delay(1000);
    lcd.clear();

    // Initialize RFID Reader
    SPI.begin();
    rfid.PCD_Init();
    Serial.println("RFID Reader Initialized");

    // Initialize Buzzer and Button
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(BUTTON_PIN, INPUT_PULLUP);
}

void loop() {
    // Check button state
    if (digitalRead(BUTTON_PIN) == LOW) {
        handleButtonPress();
    } else {
        buttonHeld = false; // Reset button held state when released
    }

    // Look for new cards
    if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) {
        return; // No card found
    }

    // Get UID
    String uid = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
        uid += String(rfid.uid.uidByte[i], HEX);
        if (i < rfid.uid.size - 1) {
            uid += ":";
        }
    }
    uid.toUpperCase();

    // Process the tag
    processRFID(uid);

    // Halt the RFID reader
    rfid.PICC_HaltA();
}

void processRFID(String uid) {
    unsigned long currentTime = millis();
    int racerIndex = findRacer(uid);

    // If racer is new, add them to the array
    if (racerIndex == -1) {
        if (racerCount >= maxRacers) {
            Serial.println("Error: Maximum racers reached!");
            return;
        }

        racerIndex = racerCount++;
        racers[racerIndex].uid = uid;
        racers[racerIndex].lapCount = 0;
        racers[racerIndex].startTime = currentTime;
        racers[racerIndex].lastLapTime = currentTime;
        racers[racerIndex].lapTime = 0;

        Serial.println("New Racer Detected: " + uid);
    }

    // Update lap count and times
    racers[racerIndex].lapCount++;
    racers[racerIndex].lapTime = currentTime - racers[racerIndex].lastLapTime;
    racers[racerIndex].lastLapTime = currentTime;

    // Play buzzer on lap update
    playBuzzer();

    // Display on LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Tag: ");
    lcd.print(uid.substring(0, 6)); // Display part of the UID
    lcd.setCursor(0, 1);
    lcd.print("Lap: ");
    lcd.print(racers[racerIndex].lapCount);
    lcd.print("/");
    lcd.print(totalLaps);

    // Log to Serial in CSV format: UID, lapCount, lapTime, totalElapsedTime
    unsigned long elapsedTime = currentTime - racers[racerIndex].startTime;
    Serial.print(uid);                 // UID
    Serial.print(",");                 // Separator
    Serial.print(racers[racerIndex].lapCount); // Lap Count
    Serial.print(",");                 // Separator
    Serial.print(racers[racerIndex].lapTime / 1000.0); // Lap Time (seconds)
    Serial.print(",");                 // Separator
    Serial.println(elapsedTime / 1000.0); // Total Elapsed Time (seconds)

    // Check if the racer has completed the race
    if (racers[racerIndex].lapCount >= totalLaps) {
        Serial.println("Racer " + uid + " has completed the race!");
    }
}

void playBuzzer() {
    int frequency = 2000; // 2 kHz for better audibility
    int duration = 500;   // 500 ms
    tone(BUZZER_PIN, frequency, duration);
    delay(duration);      // Ensure the buzzer plays the entire duration
    noTone(BUZZER_PIN);   // Stop the tone
}

int findRacer(String uid) {
    for (int i = 0; i < racerCount; i++) {
        if (racers[i].uid == uid) {
            return i;
        }
    }
    return -1; // Not found
}

void handleButtonPress() {
    static unsigned long buttonPressTime = 0;

    // Record the time when the button is first pressed
    if (!buttonHeld) {
        buttonPressTime = millis();
        buttonHeld = true;
    }

    // If button is held for 2 seconds, reset the system
    if (millis() - buttonPressTime >= 2000) {
        resetSystem();
        return;
    }

    // If button is pressed briefly, cycle through racers
    if (millis() - buttonPressTime > 200 && !buttonHeld) {
        currentRacerIndex = (currentRacerIndex + 1) % racerCount;
        displayRacerStats(currentRacerIndex);
        buttonHeld = true;
    }
}

void resetSystem() {
    lcd.clear();
    lcd.print("System Reset");
    delay(2000);
    lcd.clear();

    // Clear racer data
    racerCount = 0;
    currentRacerIndex = 0;
}

void displayRacerStats(int index) {
    if (index < 0 || index >= racerCount) {
        return;
    }

    Racer racer = racers[index];

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Racer ");
    lcd.print(index + 1);
    lcd.setCursor(0, 1);
    lcd.print("Lap: ");
    lcd.print(racer.lapCount);
    lcd.print("/");
    lcd.print(totalLaps);
}
