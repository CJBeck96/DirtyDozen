#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

// Pin Definitions for LCD
#define LCD_RS 4
#define LCD_E 6
#define LCD_D4 10
#define LCD_D5 11
#define LCD_D6 12
#define LCD_D7 13

// Pin Definitions for RFID Reader
#define RST_PIN 9
#define SS_PIN 8

// Pin Definitions for Buzzer and Button
#define BUZZER_PIN 7
#define BUTTON_PIN 2

// Create LCD and RFID objects
LiquidCrystal lcd(LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
MFRC522 rfid(SS_PIN, RST_PIN);

// Racer Data
const int maxRacers = 10;
const int totalLaps = 30;

struct Racer {
    String uid;
    int lapCount;
    unsigned long startTime;
    unsigned long lastLapTime;
    unsigned long lapTime;
};

Racer racers[maxRacers];
int racerCount = 0;
int currentRacerIndex = 0; // For cycling through racers

void setup() {
    // Initialize Serial
    Serial.begin(9600);

    // Initialize LCD
    lcd.begin(16, 2);
    lcd.print("RFID Lap Logger");
    delay(2000);
    lcd.clear();
    lcd.print("Ready...");
    delay(1000);
    lcd.clear();

    // Initialize RFID Reader
    SPI.begin();
    rfid.PCD_Init();
    Serial.println("RFID Reader Initialized");

    // Initialize Buzzer and Button
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(BUTTON_PIN, INPUT_PULLUP); // Use internal pull-up resistor
}

void loop() {
    // Check for button press
    static unsigned long buttonPressTime = 0;
    if (digitalRead(BUTTON_PIN) == LOW) {
        if (buttonPressTime == 0) {
            buttonPressTime = millis();
        } else if (millis() - buttonPressTime > 3000) {
            resetSystem();
            buttonPressTime = 0;
            return;
        }
    } else if (buttonPressTime > 0) {
        if (millis() - buttonPressTime < 3000) {
            cycleRacerStats();
        }
        buttonPressTime = 0;
    }

    // Simulate RFID reads for testing (comment out for actual use)
    simulateRFID();

    // Look for new cards
    if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) {
        return;
    }

    // Get UID
    String uid = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
        uid += String(rfid.uid.uidByte[i], HEX);
        if (i < rfid.uid.size - 1) {
            uid += ":";
        }
    }
    uid.toUpperCase();

    // Process the tag
    processRFID(uid);

    // Halt the RFID reader
    rfid.PICC_HaltA();
}

// Process RFID tag
void processRFID(String uid) {
    unsigned long currentTime = millis();
    int racerIndex = findRacer(uid);

    if (racerIndex == -1) {
        if (racerCount >= maxRacers) {
            Serial.println("Error: Maximum racers reached!");
            return;
        }

        racerIndex = racerCount++;
        racers[racerIndex].uid = uid;
        racers[racerIndex].lapCount = 0;
        racers[racerIndex].startTime = currentTime;
        racers[racerIndex].lastLapTime = currentTime;

        Serial.println("New Racer Detected: " + uid);
    }

    racers[racerIndex].lapCount++;
    racers[racerIndex].lapTime = currentTime - racers[racerIndex].lastLapTime;
    racers[racerIndex].lastLapTime = currentTime;

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Tag: ");
    lcd.print(uid.substring(0, 6));
    lcd.setCursor(0, 1);
    lcd.print("Lap: ");
    lcd.print(racers[racerIndex].lapCount);
    lcd.print("/");
    lcd.print(totalLaps);

    unsigned long elapsedTime = currentTime - racers[racerIndex].startTime;
    Serial.print(uid);
    Serial.print(",");
    Serial.print(racers[racerIndex].lapCount);
    Serial.print(",");
    Serial.print(racers[racerIndex].lapTime / 1000.0);
    Serial.print(",");
    Serial.println(elapsedTime / 1000.0);

    // Sound buzzer for each lap
    digitalWrite(BUZZER_PIN, HIGH);
    delay(500);
    digitalWrite(BUZZER_PIN, LOW);

    if (racers[racerIndex].lapCount >= totalLaps) {
        Serial.println("Racer " + uid + " has completed the race!");
    }
}

// Cycle through racer stats on LCD
void cycleRacerStats() {
    if (racerCount == 0) {
        lcd.clear();
        lcd.print("No racers yet");
        delay(2000);
        lcd.clear();
        return;
    }

    currentRacerIndex = (currentRacerIndex + 1) % racerCount;
    Racer racer = racers[currentRacerIndex];

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Tag: ");
    lcd.print(racer.uid.substring(0, 6));
    lcd.setCursor(0, 1);
    lcd.print("Lap: ");
    lcd.print(racer.lapCount);
    lcd.print("/");
    lcd.print(totalLaps);
    delay(2000); // Display stats for 2 seconds
}

// Reset system
void resetSystem() {
    lcd.clear();
    lcd.print("Resetting...");
    delay(2000);

    racerCount = 0;
    currentRacerIndex = 0;
    for (int i = 0; i < maxRacers; i++) {
        racers[i] = Racer();
    }

    lcd.clear();
    lcd.print("Ready...");
    Serial.println("System Reset");
}

// Find racer by UID
int findRacer(String uid) {
    for (int i = 0; i < racerCount; i++) {
        if (racers[i].uid == uid) {
            return i;
        }
    }
    return -1;
}

// Simulate RFID reads for testing
void simulateRFID() {
    static unsigned long lastSimulationTime = 0;
    if (millis() - lastSimulationTime > 20000) { // Simulate every 20 seconds
        processRFID("SIM:123456");
        lastSimulationTime = millis();
    }
}
