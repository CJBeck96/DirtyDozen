#include <LiquidCrystal.h>
#include <Adafruit_GFX.h>
#include <Adafruit_LEDBackpack.h>
#include <MFRC522.h>
#include <SPI.h>

// Pin Definitions for LCD
#define LCD_RS 4
#define LCD_E 6
#define LCD_D4 10
#define LCD_D5 11
#define LCD_D6 12
#define LCD_D7 13

// Pin Definitions for RFID
#define RST_PIN 9
#define SS_PIN 53

// Pin Definitions for Buzzer and Button
#define BUZZER_PIN 7
#define BUTTON_PIN 22

// Create LCD object
LiquidCrystal lcd(LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

// Create HT16K33 matrix object
Adafruit_8x8matrix matrix = Adafruit_8x8matrix();

// Create RFID reader object
MFRC522 rfid(SS_PIN, RST_PIN);

const int maxRacers = 10;  // Maximum number of racers
const int totalLaps = 30;  // Total laps required per racer

// Data Structures
struct Racer {
    String uid;
    int lapCount;
    unsigned long startTime;
    unsigned long lastLapTime;
    unsigned long lapTime;
};

Racer racers[maxRacers];
int racerCount = 0;
int currentRacerIndex = 0;  // For cycling through racers' stats

// Button State
unsigned long buttonPressTime = 0;
bool buttonHeld = false;

void setup() {
    // Initialize Serial
    Serial.begin(9600);

    // Initialize LCD
    lcd.begin(16, 2);
    lcd.print("RFID Lap Logger");
    delay(2000);
    lcd.clear();

    // Initialize Buzzer and Button
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(BUTTON_PIN, INPUT_PULLUP);

    // Initialize HT16K33 matrix
    matrix.begin(0x70); // Default I2C address
    matrix.clear();
    matrix.writeDisplay();

    // Initialize RFID reader
    SPI.begin();
    rfid.PCD_Init();
    Serial.println("RFID reader initialized.");

    // Set up race
    setupRace();
}

void loop() {
    // Handle RFID Scans
    handleRFIDScan();

    // Handle Button Press
    handleButtonPress();
}

void setupRace() {
    lcd.clear();
    lcd.print("Set Racers: ");
    lcd.setCursor(0, 1);
    lcd.print("0");

    int numRacers = 0;
    while (true) {
        if (digitalRead(BUTTON_PIN) == LOW) {
            delay(300); // Debounce
            numRacers++;
            if (numRacers > maxRacers) numRacers = 0;

            lcd.setCursor(0, 1);
            lcd.print(numRacers);
        }

        if (digitalRead(BUTTON_PIN) == HIGH && buttonHeld) {
            buttonHeld = false;
            buttonPressTime = 0;
        } else if (digitalRead(BUTTON_PIN) == LOW && !buttonHeld) {
            buttonHeld = true;
            buttonPressTime = millis();
        }

        if (buttonHeld && millis() - buttonPressTime > 3000) {
            racerCount = numRacers;
            lcd.clear();
            lcd.print("Register Tags");
            lcd.setCursor(0, 1);
            lcd.print("Scan now...");
            break;
        }
    }

    for (int i = 0; i < racerCount; i++) {
        while (true) {
            if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
                String uid = getUID();
                racers[i].uid = uid;
                racers[i].lapCount = 0;

                // Write starting data to the tag
                writeRFIDTag("START");
                lcd.clear();
                lcd.print("Tag Registered:");
                lcd.setCursor(0, 1);
                lcd.print(uid.substring(0, 6));
                delay(1000);
                rfid.PICC_HaltA();
                rfid.PCD_StopCrypto1();
                break;
            }
        }
    }

    lcd.clear();
    lcd.print("Race Ready!");
    delay(2000);
    lcd.clear();
}

void handleRFIDScan() {
    // Look for new RFID cards
    if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) {
        return;
    }

    String uid = getUID();
    processRFID(uid);

    // Halt PICC and stop encryption to be ready for next read
    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
}

String getUID() {
    String uid = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
        uid += String(rfid.uid.uidByte[i], HEX);
        if (i < rfid.uid.size - 1) uid += ":";
    }
    return uid;
}

void writeRFIDTag(String data) {
    MFRC522::MIFARE_Key key;
    for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

    byte block = 1;
    byte buffer[16];
    data.getBytes(buffer, 16);

    MFRC522::StatusCode status = rfid.MIFARE_Write(block, buffer, 16);
    if (status != MFRC522::STATUS_OK) {
        Serial.print("Write failed: ");
        Serial.println(rfid.GetStatusCodeName(status));
    } else {
        Serial.println("Write successful.");
    }
}

void processRFID(String uid) {
    // Original processing logic
    // ...
}

